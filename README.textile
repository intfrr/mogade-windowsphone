h2. Mogade For Windows Phone

Mogade is a free service web-based service which allows game developers to quickly enchance their games with auxiliary functionality (such as leaderboards).

This is the official Windows Phone library. The library wraps the "core .NET driver":https://github.com/mogade/mogade-csharp. It is currently a very thin wrapper, but we do plan on adding features.

h3. Other Libraries

For a list of other libraries, please visit "http://mogade.com/manage/libraries":http://mogade.com/manage/libraries

h3. Support

The "http://groups.google.com/group/mogadedev":http://groups.google.com/group/mogadedev google group is the best place for developers, either of games or libraries, to visit.

h3. Usage

The library should be straightforward to most .NET developers. The main entry point is the @MogadeClient@ class (which implements @IMogadeClient@ for you DI junkies).

You instantiate @MogadeClient@ via the static @Initialize@ method, supplying your game key and game secret (available from the details view of your game on the mogade.com website):
<pre>var mogade = MogadeClient.Initialize("myGameKey", "shhhMySecret");</pre>

Once created, its generally a good idea to call @update@ - which'll download any changes made to your game's confirmation and store it in a file called mogade.dat. Once completed, you can use the various methods to interact with the mogade service. Note that all methods fire asynchronously, and thus return void and require a callback method:
<pre>mogade.GetLeaderboard("leaderboardId", LeaderboardScope.Daily, page, leaderboard => { //do something with the leaderboard});</pre>

h3. API Overview

Mogade is based around a _RESTish_ API, accepting and returning JSON messages.

A full API overview can be read here "http://mogade.com/manage/api":http://mogade.com/manage/api