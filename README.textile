h2. Mogade For Windows Phone

Mogade is a free service web-based service which allows game developers to quickly enchance their games with auxiliary functionality (such as leaderboards).

This is the official Windows Phone library. The library wraps the "core .NET driver":https://github.com/mogade/mogade-csharp. It is currently a very thin wrapper, but we do plan on adding features.

h3. Other Libraries

For a list of other libraries, please visit "http://mogade.com/manage/libraries":http://mogade.com/manage/libraries

h3. Support

The "http://groups.google.com/group/mogadedev":http://groups.google.com/group/mogadedev google group is the best place for developers, either of games or libraries, to visit.

h3. Configuration

You can configure how the library works through the @MogadeConfiguration.Configuration@ fluent interface.

h4. Unique Id Strategy Configuration

The "anonymous authentication":http://mogade.com/manage/api#authentication which mogade currently supports relies on the generation of a unique id by the client library. 3 methods of generating a unique id are currently supported.

First, the default, is for mogade to generate a guid and store it using isolated storage. This approach is the least intrusive, but some features may be limited or unavailable.

Next, is to use the device id. In order to work, the @ID_CAP_IDENTITY_DEVICE@ capability must be added to your manifest file.

Finally, we can use the user's anonymous live id, which requires the @ID_CAP_IDENTITY_USER@ capability.

While we default to the generated strategy (since it requires no additional configuration), we generally recommend developers to adopt one of the other two options. 

To configure the strategy, on startup, call:

<pre>MogadeConfiguration.Configuration(c => c.UsingUniqueIdStrategy(UniqueIdStrategy.UserId));</pre>

h3. Usage

The library should be straightforward to most .NET developers. The main entry point is the @MogadeClient@ class (which implements @IMogadeClient@ for you DI junkies).

You instantiate @MogadeClient@ via the static @Initialize@ method, supplying your game key and game secret (available from the details view of your game on the mogade.com website):
<pre>var mogade = MogadeClient.Initialize("myGameKey", "shhhMySecret");</pre>

Once created, you should call @update@ - which'll download any changes made to your game's confirmation and store it in a file called mogade.dat. Once completed, you can use the various methods to interact with the mogade service. 

The complete initialize sequence should look something like:
<pre>MogadeConfiguration.Configuration(c => c.UsingUniqueIdStrategy(UniqueIdStrategy.UserId));
var mogade = MogadeClient.Initialize("myGameKey", "shhhMySecret");
mogade.update(ok => {
  if (ok == true) {
    //ready to go!
  }
});</pre>

Note that the methods which actually interact with the server will fire asynchronously (though its possible for many to fail quickly given invalid input):

<pre>mogade.GetLeaderboard("leaderboardId", LeaderboardScope.Daily, page, leaderboard => { //do something with the leaderboard});</pre>

h3. API Overview

Mogade is based around a _RESTish_ API, accepting and returning JSON messages.

A full API overview can be read here "http://mogade.com/manage/api":http://mogade.com/manage/api